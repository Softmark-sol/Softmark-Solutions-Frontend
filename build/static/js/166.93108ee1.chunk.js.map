{"version":3,"file":"static/js/166.93108ee1.chunk.js","mappings":"8LAKA,MAkHA,GAlHuBA,EAAAA,EAAAA,aAAW,CAACC,EAAOC,KACxC,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,WAAS,IAEjCC,EAAAA,EAAAA,YAAU,MAERC,EAAAA,EAAAA,KAAoBC,gBACZC,EAAAA,EAAAA,GAASC,EAAO,IACrBC,MAAK,KACNP,GAAQ,EAAK,GACb,GACD,IAEH,MAAMQ,EAAmBC,IACvBC,QAAQC,IAAIF,EAAU,EAGlBG,GAAUC,EAAAA,EAAAA,UACd,MACEC,WAAY,CACVC,MAAO,CACLC,MAAO,gBAGXC,SAAU,GACVC,cAAe,CACbC,OAAQ,CACNC,QAAS,CACPC,QAAQ,EACRC,KAAM,QAERC,QAAS,CACPF,QAAQ,EACRC,KAAM,YAGVE,MAAO,CACLC,KAAM,CACJC,SAAU,GAEZC,QAAS,CACPC,SAAU,IACVC,SAAU,MAIhBC,UAAW,CACTf,MAAO,CACLC,MAAO,WAETe,MAAO,CACLhB,MAAO,UACPa,SAAU,IACVP,QAAQ,EACRW,QAAS,GACTC,MAAO,GAETC,KAAM,CACJC,UAAW,OACXd,QAAQ,EACRe,SAAU,CACRC,QAAS,UAEXC,QAAQ,EACRC,MAAO,EACPC,UAAU,EACVC,KAAM,CACJpB,QAAQ,EACRT,QAAS,CACP8B,KAAM,aACNC,UAAW,KAIjBC,OAAQ,CACNC,QAAS,CACPxB,QAAQ,EACRyB,KAAM,KAER9B,MAAO,IAETgB,QAAS,CACPhB,MAAO,IAET+B,MAAO,CACLL,KAAM,YAERM,KAAM,CACJhC,MAAO,CAAEiC,IAAK,EAAGC,IAAK,KAG1BC,cAAc,KAEhB,IAGF,OAAIpD,GAEAqD,EAAAA,EAAAA,KAAA,OACEC,UAAU,qBACVvD,IAAKA,EACLwD,MAAO,CAAErB,MAAO,OAAQsB,OAAQ,SAAUC,UAE1CJ,EAAAA,EAAAA,KAACK,EAAAA,GAAS,CACRC,GAAG,cACHlD,gBAAiBA,EACjBI,QAASA,MAMV,IAAI,G","sources":["components/Particles.jsx"],"sourcesContent":["import React, { useEffect, useMemo, useState, forwardRef } from \"react\";\r\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\r\nimport { loadSlim } from \"@tsparticles/slim\";\r\nimport \"../css/particle.css\";\r\n\r\nconst ParticleEffect = forwardRef((props, ref) => {\r\n  const [init, setInit] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Initialize particle engine with slim version\r\n    initParticlesEngine(async (engine) => {\r\n      await loadSlim(engine);\r\n    }).then(() => {\r\n      setInit(true); // Set init to true when particles engine is initialized\r\n    });\r\n  }, []);\r\n\r\n  const particlesLoaded = (container) => {\r\n    console.log(container); // Log the container reference when particles are loaded\r\n  };\r\n\r\n  const options = useMemo(\r\n    () => ({\r\n      background: {\r\n        color: {\r\n          value: \"transparent\", // Set background color to transparent for overlay effect\r\n        },\r\n      },\r\n      fpsLimit: 60, // Frames per second limit\r\n      interactivity: {\r\n        events: {\r\n          onClick: {\r\n            enable: false,\r\n            mode: \"push\", // Interaction mode on click\r\n          },\r\n          onHover: {\r\n            enable: true,\r\n            mode: \"repulse\", // Interaction mode on hover\r\n          },\r\n        },\r\n        modes: {\r\n          push: {\r\n            quantity: 4, // Number of particles pushed on click\r\n          },\r\n          repulse: {\r\n            distance: 100, // Distance of repulsion on hover\r\n            duration: 0.4, // Duration of repulsion animation\r\n          },\r\n        },\r\n      },\r\n      particles: {\r\n        color: {\r\n          value: \"#4599b4\", // Color of particles\r\n        },\r\n        links: {\r\n          color: \"#4599b4\", // Color of particle links\r\n          distance: 150, // Distance of particle links\r\n          enable: true,\r\n          opacity: 0.5, // Opacity of particle links\r\n          width: 1, // Width of particle links\r\n        },\r\n        move: {\r\n          direction: \"none\", // Movement direction\r\n          enable: true,\r\n          outModes: {\r\n            default: \"bounce\", // Movement behavior when particles move outside the canvas\r\n          },\r\n          random: false,\r\n          speed: 2, // Speed of particle movement\r\n          straight: false,\r\n          path: {\r\n            enable: true,\r\n            options: {\r\n              type: \"sinusoidal\", // Wave-like movement\r\n              frequency: 1,\r\n            },\r\n          },\r\n        },\r\n        number: {\r\n          density: {\r\n            enable: true, // Enable density-based number of particles\r\n            area: 800, // Density area\r\n          },\r\n          value: 80, // Number of particles\r\n        },\r\n        opacity: {\r\n          value: 0.7, // Opacity of particles\r\n        },\r\n        shape: {\r\n          type: \"triangle\", // Shape of particles (\"circle\", \"edge\", \"triangle\", etc.)\r\n        },\r\n        size: {\r\n          value: { min: 1, max: 5 }, // Size range of particles\r\n        },\r\n      },\r\n      detectRetina: true, // Enable retina display support\r\n    }),\r\n    []\r\n  );\r\n\r\n  if (init) {\r\n    return (\r\n      <div\r\n        className=\"particle-container\"\r\n        ref={ref}\r\n        style={{ width: \"100%\", height: \"100vh\" }}\r\n      >\r\n        <Particles\r\n          id=\"tsparticles\"\r\n          particlesLoaded={particlesLoaded}\r\n          options={options}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null; // Render nothing until particles are initialized\r\n});\r\n\r\nexport default ParticleEffect;\r\n"],"names":["forwardRef","props","ref","init","setInit","useState","useEffect","initParticlesEngine","async","loadSlim","engine","then","particlesLoaded","container","console","log","options","useMemo","background","color","value","fpsLimit","interactivity","events","onClick","enable","mode","onHover","modes","push","quantity","repulse","distance","duration","particles","links","opacity","width","move","direction","outModes","default","random","speed","straight","path","type","frequency","number","density","area","shape","size","min","max","detectRetina","_jsx","className","style","height","children","Particles","id"],"sourceRoot":""}